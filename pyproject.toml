[project]
name = "trankil"
version = "0.1.0"
description = "Trankil is a Python tool that helps you create customized multilingual Translations Anki cards."
license = "MIT"
authors = [
    {name = "Adrien COURATIER"}
]
readme = "README.md"
python = ">=3.9,<4.0"
requires-python = ">=3.9,<4.0"
dependencies = [
    "genanki (>=0.13.1,<0.14.0)",
    "requests (>=2.32.4,<3.0.0)",
    "pydantic (>=2.11.7,<3.0.0)",
    "pydantic-settings (>=2.10.1,<3.0.0)",
    "loguru (>=0.7.3,<0.8.0)",
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
package-mode = false

[tool.poetry.group.dev.dependencies]
notebook = "^7.4.4"
ruff = "^0.12.4"
mypy = "^1.17.0"
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
pytest-mock = "^3.14.1"

[tool.poetry.scripts]
trankil = "trankil.cli:run"

[tool.ruff]
line-length = 99
indent-width = 4

target-version = "py39"

exclude = [
  ".git",        # Contains the git repo
  "__pycache__", # Compiled python files
  ".mypy_cache", # Pointless
  ".ruff_cache", # Avoid auto-check
  ".venv",
  ".ipynb",
  "logs",
  "build",       # Distribution files (poetry build command)
  "dist"         # Distribution files (poetry build command)
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = true

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = ["I", "F", "E", "W"]        # I: import (isort), F: pyflakes, E/W: pycodestyle
extend-select = ["B", "UP", "C90"]   # B: bugbear, UP: pyupgrade, C90: mccabe
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["trankil"]      # Modules internes Ã  ton projet
split-on-trailing-comma = false
